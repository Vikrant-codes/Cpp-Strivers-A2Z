> STL stands for standard template library which contains a lot of pre-defined templates in terms of containers and classes which makes it very easy for 
developers or programmers to implement different data structures easily without having to write complete code and worry about space-time complexities.

> C++ STL contains various Algorithms, Containers, Functions and Iterators.

> Containers in STL
ğŸ”¹Sequence Containers : Vector, list, queue, deque, priority_queue, stack
ğŸ”¹Associative Containers : Set, multiset, unordered_set, unordered_multiset, map, multimap, unordered_map, unordered_multimap 

<-- Sequence Containers -->
1. Vector
ğŸ”¹Dynamic array that can grow and shrink in size.
ğŸ”¹Provides random access to elements.
ğŸ”¹Efficient for insertion and deletion at the end.

2. List
ğŸ”¹Doubly linked list.
ğŸ”¹Allows efficient insertion and deletion at both ends and at any position.
ğŸ”¹Does not provide random access.

3. Deque (Double-ended Queue)
ğŸ”¹Dynamic array that allows insertion and deletion at both ends.
ğŸ”¹Provides random access to elements.
ğŸ”¹Efficient for insertion and deletion at both ends.

4. Queue
ğŸ”¹FIFO (First-In-First-Out) data structure.
ğŸ”¹Allows insertion at the back and deletion from the front.
ğŸ”¹Does not provide random access.

5. Priority Queue
ğŸ”¹A special type of queue where elements are ordered by priority.
ğŸ”¹The element with the highest priority is at the front.
ğŸ”¹Typically implemented as a max-heap or min-heap.

6. Stack
ğŸ”¹LIFO (Last-In-First-Out) data structure.
ğŸ”¹Allows insertion and deletion at the top.
ğŸ”¹Does not provide random access.

<-- Associative Containers -->
1. Set
ğŸ”¹Stores unique elements in a sorted order.
ğŸ”¹Provides efficient insertion, deletion, and lookup.
ğŸ”¹Does not allow duplicate elements.

2. Multiset
ğŸ”¹Similar to set, but allows duplicate elements.
ğŸ”¹Stores elements in a sorted order.

3. Unordered Set
ğŸ”¹Stores unique elements in an unordered manner.
ğŸ”¹Provides average constant-time complexity for insertion, deletion, and lookup.
ğŸ”¹Does not allow duplicate elements.

4. Unordered Multiset
ğŸ”¹Similar to unordered_set, but allows duplicate elements.
ğŸ”¹Stores elements in an unordered manner.

5. Map
ğŸ”¹Stores key-value pairs in a sorted order based on the keys.
ğŸ”¹Provides efficient insertion, deletion, and lookup.
ğŸ”¹Keys are unique.

6. Multimap
ğŸ”¹Similar to map, but allows duplicate keys.
ğŸ”¹Stores key-value pairs in a sorted order based on the keys.

7. Unordered Map
ğŸ”¹Stores key-value pairs in an unordered manner.
ğŸ”¹Provides average constant-time complexity for insertion, deletion, and lookup.
ğŸ”¹Keys are unique.

8. Unordered Multimap
ğŸ”¹Similar to unordered_map, but allows duplicate keys.
ğŸ”¹Stores key-value pairs in an unordered manner.


next_permutation in STL
__builtin_popcount() in STL
sort() 
min_element() 
max_element() 